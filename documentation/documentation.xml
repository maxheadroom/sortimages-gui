<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                    "file:///home/m0554/Documents/docbook-xml/docbookx.dtd">
<!-- $Id: documentation.xml,v 1.3 2005/11/17 07:18:56 zero_data Exp $ -->
<book>
  <title>SortImagesGUI - Documentation</title>
  <bookinfo>

    <author>
      <!-- one of (honorific firstname surname lineage othername affiliation authorblurb contrib personname) -->
      <firstname>Falko</firstname>
      <surname>Zurell</surname>
      <email>zero_data@sourceforge.net</email>
    </author>
  </bookinfo>
  <preface>
    <title>What is SortImagesGUI and what can it do for me?</title>
    <para><productname class="copyright">SortImages</productname> is a <productname>Java</productname> application wich sorts images from digital still image cameras. This is done by reading the EXIF-Header of the image file (assuming that the image file is in JPEG format which provides EXIF informations) and extracting the capture date of the image. Then the image is copied into a target directory sorted by year, month and day. The target file is also renamed from it's original name (normally an automatically generated forthnumbered name from the digital camera) to a filename representing the images capture date and time. For instance: if a photo was taken on april 9th in 2002 at 14:45:13 the target filename of the file will be ./2002/04/09/2002-04-09_14-45-13.jpg.</para>
    <para>Additionally some of the informations in the EXIF-Header can be inserted into a database with the MD5-hash of the image file as key. If <productname class="copyright">SortImagesGUI</productname> gets a new file for sorting it will calculate the MD5 hash of that file and look up the database if the image was already sorted regardless of it's original or current name. This will bypass the problem of having an image an not knowing if it's alread there. A side effect of the database is that you can search images which are for instance from the same month, from the same camera model or camera maker. Or all images where a flash light was used.</para>
    <para>
<ulink url="http://docbook.sourceforge.net/">
<synopsis>
 <mediaobject>
      <!-- one of (videoobject audioobject imageobject textobject) -->
      <imageobject>
	<imagedata fileref="http://docbook.sourceforge.net/graphics/created-with-docbook-button.png"/>
      </imageobject>
    </mediaobject>
</synopsis>
</ulink>
</para>
  </preface>
  <chapter>
    <title>Userdocumentation</title>
    <abstract>
      <!-- one of (formalpara para simpara) -->
      <simpara>This chapter describes the usage of <productname class="copyright">SortImagesGUI</productname> for normal Users. This involves getting <productname class="copyright">SortImagesGUI</productname>, configuring it, preparing the environment ant running it.</simpara>
    </abstract>
    <section>
      <title>License</title>
      <para>This software is free software and comes under terms of the GNU public license (GPL) as seen under <ulink url="http://www.gnu.org/copyleft/gpl.html">http://www.gnu.org/copyleft/gpl.html</ulink> (Copyleft)</para>
      <para>Beneath some other points this means in short:
<simplelist>
	  <member>you may use this software at no charge for personal or business use</member>
	  <member>you may modify this software as you like</member>
	  <member>you may redistribute it with your modifications as long as the new product will also be copyleft licensed after the GPL (GPL infected)</member>
	  <member>you must include the original copyleft header with your redistribution</member>
	</simplelist>
</para>
       </section>
    <section>
      <title>System Requirements</title>
      <para>As <productname class="copyright">SortImagesGUI</productname> is written entirely in <productname>Java</productname> it should theoretically run on any platform that has got an appropriate <productname>Java</productname> Virtual Maschine. That's the weak point in fact. The EXIF-Reader library I used makes use of some functions from the new JDK 1.4 so you will need an JDK (or JRE) of at least version 1.4. If this is available for your platform and you have installed it, then everything should word fine.</para>
      <para>
Because SortImagesGUI can store the image meta information in a database you will need one to run <productname class="copyright">SortImagesGUI</productname> in datbase mode. Currently there is only support for mySQL. But future releases will support different database platforms. You are free to provide a interface for your favorite database (see developer documentation).
</para>
    </section>
    <section>
      <title>Getting <productname class="copyright">SortImagesGUI</productname></title>
      <para>Generally you can find all the informations about SortImagesGUI on the SourceForge.net <ulink url="http://sourceforge.net/projects/sortimages/">project homepage</ulink>. There is a file release area where you can find the latest releases of this software. You can also fetch the source code from the CVS repository or browse the source via the CVS webinterface.</para>
      <para>SortImagesGUI classes are packaged within a single JAR file. This is all you need to run SortImagesGUI. So download the latest version from <ulink url="http://sourceforge.net/project/showfiles.php?group_id=96327&amp;package_id=105330">http://sourceforge.net/project/showfiles.php?group_id=96327&amp;package_id=105330</ulink></para>
    </section>

    <section>
      <title>Database setup</title>
      <para>In order to run <productname class="copyright">SortImagesGUI</productname> you will need an SQL database to store image metadata in. Currently only mySQL is supported. As you saw in the last section you will have to provide contact information for the database.</para>
      <para>The schema for the used database is quite simple:
<screen>



-- MySQL dump 9.09
--
-- Host: localhost    Database: sortimages
---------------------------------------------------------
-- Server version       4.0.15

--
-- Current Database: sortimages
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ sortimages;

USE sortimages;

--
-- Table structure for table `md5sums`
--

CREATE TABLE md5sums (
  md5 varchar(32) NOT NULL default '',
  cameramodel varchar(255) default NULL,
  cameramaker varchar(255) default NULL,
  capturedate datetime NOT NULL default '0000-00-00 00:00:00',
  height mediumint(5) NOT NULL default '0',
  width mediumint(5) NOT NULL default '0',
  flash varchar(50) default NULL,
  aperture_time varchar(50) default NULL,
  focal_length varchar(50) default NULL,
  location varchar(255) NOT NULL default '',
  original_name varchar(255) NOT NULL default '',
  exposure_time varchar(50) default NULL,
  PRIMARY KEY  (md5)
) TYPE=MyISAM;
</screen>
</para>
    </section>
    <section>
      <title>Unix Start Script</title>
      <para>The simplest way to start <productname class="copyright">SortImagesGUI</productname> und Unix or Linux is to use a shell script which wraps around the java call and sets the environment appropriatly. See this examples. You have to customize the pathes to where your JRE (or JDK) and <productname class="copyright">SortImagesGUI</productname> is located.</para>
      <para>
<screen>
#!/bin/sh
# $Id: documentation.xml,v 1.3 2005/11/17 07:18:56 zero_data Exp $

export JAVA_HOME=/usr/java/j2sdk1.4.2_02
export CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib
export PATH=$JAVA_HOME/bin:$PATH

java -jar /usr/local/sortimages/SortImagesGUI.jar
</screen>
</para>
      <para>Assuming you will call this script "sortimagesgui.sh" then the following call syntax would appear: #>sortimagesgui.sh </para>

    </section>
    <section>
      <title>Properties file</title>
      <para>SortImagesGUI stores some properties in an external file. This properties file is located in the users home directory. When you start SortImagesGUI  as stated above (with no further command line parameters) then it will look for a file called ".sortimages" in the actual users home directory and load it if found. If this file is not found it will be created with default values.</para>
      <para>If you like to put the properties file elsewhere then you have to tell SortImagesGUI the location of this file at every startup. This is done via a command line parameter to the JVM. The following syntax show how to call SortImagesGUI with a different location of the properties files:</para>
      <para>
<screen>
java -DCONFIGFILE=/usr/local/SortImagesGUI/sortimages.properties -jar ./SortImagesGUI.jar
</screen>
</para>
      </section>
    <section>
      <title>User Interface</title>
      <para>The userinterface is quite simple. There are only two input fields you can use and two buttons. 
<mediaobject>
      <!-- one of (videoobject audioobject imageobject textobject) -->
      <imageobject>
	<imagedata fileref="http://sortimages.sourceforge.net/screenshot.png"/>
      </imageobject>
    </mediaobject>
</para>
      <para>When you start SortImagesGUI for the first time you will have to edit the properties. This is done by clicking on the "File" menu and choosing the "Properties" entry. A new dialog will pop up where you can choose your properties.
<mediaobject>
	  <!-- one of (videoobject audioobject imageobject textobject) -->
	  <imageobject>
	    <imagedata fileref="http://sortimages.sourceforge.net/properties.png"/>
	  </imageobject>
	</mediaobject>
</para>
      <para>When you click the "Save" button the entered values will be saved to the properties file. This properties file is normally located in your home directory.</para>
      <para>In this properties dialog you set the connection parameter to your database and a standard target directory for the sorted images. You can override this standard target location by choosing a different target directory via the "Browse" button in the main window.</para>
      <para>The actual target directory is shown in the main directory. But attention! When you first choose an alternative target directory and afterwards edit the properties via the properties dialog the actual target directory will get updated with the default target directory from the properties file.</para>
      <para>Normally you wouldn't change the target directory and use the default you choosed at the first time instead.</para>
      <para>All you have to do is choose the source directory via the "Browse" button in the main window. All files ending with *.jpg, or *.jpeg will be searched recursivly from this parent directory onwards. File begining with a period sign are ignored. This is due to some problems on MacOS X and the hidden meta file of the MacOS Finder. The number of found files will be displayed at the bottom of the main window.</para>
      <para>Now you can press the "Sort!" button at the bottom of the main window to actually start the sorting process. The currently sorted filename will be shown on top of the message window. In the message window itself there will be some informative output.</para>
      <para>There are two progress bars. One for the current files progress and one for the overall progress. The will be not 100 percent accurate because it may be that some parts of the file progress maybe skipped because the file is already there.</para>
    </section>
  </chapter>
<!-- NEW Chapter Developer Documentation -->
  <chapter>
    <title>Developer Documentation</title>
    <section>
      <title>Getting started</title>
      <para>In order to build <productname class="copyright">SortImagesGUI</productname> from the sources or further develop it you need obviously the sources. There are two ways to get them. First is the Source-RPM (SRPM) package from the file release section at the SourceForge.net <ulink url="http://sourceforge.net/projects/sortimages/">project homepage</ulink>. Simply download the SRPM you like and install it via rpm -ivh sortimages-version.src.rpm.</para>
      <para>The second way is to get the latest sources directly from the CVS repository at SourceForge.net project page. See <ulink url="http://sourceforge.net/cvs/?group_id=96327">http://sourceforge.net/cvs/?group_id=96327</ulink></para>
    </section>
    <section>
      <title>Building from Source</title>
      <para>To build <productname class="copyright">SortImagesGUI</productname> from source you have to compile all the provided java classes. For convinience you should package them into one JAR file. So it's easier to handle. The main class you will need is the org.zurell.java.SortImagesGUI.SortImagesGUI. You can put that in an appropriate manifest into the JAR</para>
      <para>You will need at least an JDK 1.4 to build the files successfully. This is because the used EXIF-Reader library used some functions of the new 1.4 JDK</para>

      <para>The acomplish all the building tasks I've written an Ant
      build script which you will find in the base directory of the
      source distribution. To use this you need to have Ant 1.4
      preinstalled on your system. See the Ant<ulink
      url="http://ant.apache.org/"> homepage</ulink> for help.</para>
      <para>You may explore the available tasks by calling Ant in the
      following way: "ant -projecthelp". This must be done in the
      directory where the file "build.xml" is located.</para>
      <para>There are severals task. The ones you maybe like most are
      "all" and "jar". These tasks will build all the classes, the JAR
      file and the JavaDoc documentation.</para> <para>Here is a list
      of all the tasks available:
<simplelist>
	  <member><emphasis>all</emphasis> - compiles the classes from the source files, bind them to a JAR file and installs the JAR and some additional files</member>
	  <member><emphasis>clean</emphasis> - cleans up the working directory</member>
	  <member><emphasis>compile</emphasis> - compiles just the java files</member>
	  <member><emphasis>init</emphasis> - initialises the necessary timestamp</member>
	  <member><emphasis>install</emphasis> - will compile the sources, build the JAR file, create the JavaDoc  and installs all into the install directory</member>
	  <member><emphasis>jar</emphasis> - creates a JAR file from the compiled files with the appropriate MANIFEST</member>
	  <member><emphasis>javadoc</emphasis> - generates the JavaDoc documentation from the source files</member>
	  <member><emphasis>package</emphasis> - checks out the latest sources from cvs and creates a .tgz file for further packaging</member>
	  <member><emphasis>test</emphasis> - compiles the sources, creates the JAR file and calls this new build to test it.</member>
	  <member><emphasis>xslt</emphasis> - calls an external program (xsltproc) to generate HTML files from the docbook documentation (this document)</member>
	</simplelist>
</para>
    </section>
  </chapter>
  
</book>
